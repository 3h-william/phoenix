#!/usr/bin/perl
############################################################################
# Copyright (c) 2013, Salesforce.com, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#     Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#     Neither the name of Salesforce.com nor the names of its contributors may 
#     be used to endorse or promote products derived from this software without 
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
############################################################################
use strict;
use warnings;
use File::Path;

########## START of program ###########
my $debug = is_debug();

# make ReleaseRunner happy
change_to_build_dir();

# load our configuration (order matters)
load_props_from_file("default.properties", 1);
load_props_from_file("build.properties", 0);
load_props_from_file("server.properties", 0);
load_props_from_file("user.properties", 0);

resolve_properties();

# set delimiter according to platform
#
my $delim = ";";
if ("$^O" =~ m/linux|darwin|solaris/ ) {
  $delim = ":"; 
}

$ENV{EXT_DIRS} = join "$delim", (
    "$ENV{JAVA_HOME}/lib",
    "$ENV{JAVA_HOME}/jre/lib/ext",
    "$ENV{ANT_HOME}/lib",
    "$ENV{ANT_HOME}/lib/checkstyle",
);

print "ANT_HOME  = $ENV{ANT_HOME}\n" if $debug;
print "JAVA_HOME = $ENV{JAVA_HOME}\n" if $debug;
print "EXT_DIRS  = $ENV{EXT_DIRS}\n" if $debug;

for ("JAVA_HOME", "ANT_HOME") {
    die "Invalid or unspecified $_: $ENV{$_} in your environment or default.properties.\n" unless -d $ENV{$_}
}

my $inp = join(" ", @ARGV);
print "Using ARGV = $inp\n" if $debug;
my $cmdline = "$ENV{JAVA_HOME}/bin/java $ENV{ANT_GC_ARGS} -Djava.ext.dirs=\"$ENV{EXT_DIRS}\" -Dant.home=$ENV{ANT_HOME} org.apache.tools.ant.Main -emacs $inp";
print "cmdline = " . $cmdline if $debug;
my $retval = system($cmdline);

if ( "$retval" ne "0" ) {
    exit 1;
} else {
    exit 0;
}

########## END of program ###########

########## subroutines ##############

# Eat the first parameter if it's to debug the script
sub is_debug {
    if ($ARGV[0] eq "-dbg") {   # If the -dbg arg was specified.
        shift(@ARGV);  # Eat this special argument so that it does not get passed to ant.
        return 1;    # Enable debug output.
    } else {
        return 0;
    }
}

# ReleaseRunner sometimes calls this ant script outside of the build dir, but because this script uses relative paths, we might see errors such as hosts.properties not found.
sub change_to_build_dir {
    my $build_dir = $0;
    $build_dir =~ s/ant//; # remove the program name 'ant' TODO only remove the last occurance

    if (-d $build_dir) {
        print "changing current dir to: $build_dir \n" if ($debug);
        chdir $build_dir;
    }
}

# Load the specified file into environment vars, dieing if it's required
sub load_props_from_file {
    my $filename = shift;
    my $required = shift;
    my $propfile;
    if ( -f "./$filename" ) {
        $propfile = "./$filename";
    } else {
        if ( $required) {
            die "Missing $filename.\n"
        } else {
            return;
        }
    }

    open PROP, "$propfile" or die "Cannot open $propfile\n";
    while (<PROP>) {
        chomp;
        next if (/^#/);         # ignore comments
        s/^\s+//;               # ignore beginning white space
        s/\s+$//;               # ignore trailing white space
        next unless length;     # anything left? ignore blank lines
        my ($var, $value) = split(/\s*=\s*/, $_, 2);
        $ENV{$var} = $value;
    }
    close PROP;
}

# variable substitution for references
sub resolve_properties {
    my $key;
    my $rep;
    foreach $key (sort keys %ENV) {
        while ($ENV{$key} =~ /\${([^}]+)}/) {
        die "Undefined property \${$1} specified in build.properties, exiting\n" if ! exists $ENV{$1};
        $rep = $ENV{$1};
        $ENV{$key} =~ s/\${$1}/$rep/;
        }
        print "key: $key, value: $ENV{$key}\n" if ($debug);
    }
}

