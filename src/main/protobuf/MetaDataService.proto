/*******************************************************************************
 * Copyright (c) 2013, Salesforce.com, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *     Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *     Neither the name of Salesforce.com nor the names of its contributors may 
 *     be used to endorse or promote products derived from this software without 
 *     specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/

option java_package = "com.salesforce.phoenix.coprocessor.generated";
option java_outer_classname = "MetaDataProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

import "PTable.proto";

enum MutationCode {
  TABLE_ALREADY_EXISTS = 0;
  TABLE_NOT_FOUND = 1;
  COLUMN_NOT_FOUND = 2; 
  COLUMN_ALREADY_EXISTS = 3;
  CONCURRENT_TABLE_MUTATION = 4;
  TABLE_NOT_IN_REGION = 5;
  NEWER_TABLE_FOUND = 6;
  UNALLOWED_TABLE_MUTATION = 7;
  NO_PK_COLUMNS = 8;
  PARENT_TABLE_NOT_FOUND = 9; 
};

message MetaDataResponse {
  required MutationCode returnCode = 1;
  required int64 mutationTime = 2;
  optional PTable table = 3;
  repeated bytes tablesToDelete = 4; 
}

message GetTableRequest {
  required bytes tenantId = 1;
  required bytes schemaName  = 2;
  required bytes tableName = 3;
  required int64 tableTimestamp = 4;
  required int64 clientTimestamp = 5;
}

// each byte array represents a MutationProto instance
message CreateTableRequest {
  repeated bytes tableMetadataMutations = 1; 
}

message DropTableRequest {
  repeated bytes tableMetadataMutations = 1;
  required string tableType = 2;
}

message AddColumnRequest {
  repeated bytes tableMetadataMutations = 1;
}

message DropColumnRequest {
  repeated bytes tableMetadataMutations = 1;
}

message UpdateIndexStateRequest {
  repeated bytes tableMetadataMutations = 1;
}

message ClearCacheRequest {
}

message ClearCacheResponse {
}

message GetVersionRequest {
}

message GetVersionResponse {
  required int64 version = 1;
}

service MetaDataService {
  rpc getTable(GetTableRequest)
    returns (MetaDataResponse);

  rpc createTable(CreateTableRequest)
    returns (MetaDataResponse);
    
  rpc dropTable(DropTableRequest)
    returns (MetaDataResponse);
    
   rpc addColumn(AddColumnRequest)
    returns (MetaDataResponse);
    
   rpc dropColumn(DropColumnRequest)
    returns (MetaDataResponse);
    
   rpc updateIndexState(UpdateIndexStateRequest)
    returns (MetaDataResponse); 
    
   rpc clearCache(ClearCacheRequest)
    returns (ClearCacheResponse);
    
   rpc getVersion(GetVersionRequest)
    returns (GetVersionResponse);           
}
